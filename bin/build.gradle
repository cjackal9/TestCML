plugins {
	id 'java'
	id "org.xbib.gradle.plugin.jflex" version "1.5.0"
}

java {
     sourceCompatibility = JavaVersion.toVersion(11)
     targetCompatibility = JavaVersion.toVersion(11)
}

repositories {
	     jcenter()
	     ivy { 
          url 'https://www.cs.odu.edu/~zeil/ivyrepo'
      }
}

dependencies {
	     testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
	     testImplementation 'org.hamcrest:hamcrest-library:2.2'
     	 //compile 'edu.odo.cs.cs350:sourceSuffixTrees:1.4+'
}

jar {
    manifest {
        attributes 'Main-Class': 'edu.odu.cs.cs350.CommandLineProcessor'
    }
	baseName 'DupDetector'
}

test {
     ignoreFailures = true
     useJUnitPlatform()
}
task reports (dependsOn: ['javadoc', 'check']) {
    description 'Generate all reports for this project'
}

task clonePages() {                                            
    doLast {
        mkdir 'build/gh-pages'
        def thisRepo = rootProject.projectDir.toString()
        def pagesDir = "$buildDir/gh-pages"
        project.delete {
            delete pagesDir
        }
        def grgit = git.clone {
            dir = pagesDir
            uri = 'file:' + thisRepo
            bare = false
            refToCheckout = 'gh-pages'
        }
        grgit.checkout {
            branch = 'gh-pages'
        }
    }
}

task copyReports (type: Copy, dependsOn: ['bake', 'clonePages']) {  
    from "$buildDir/jbake"
    into "$buildDir/gh-pages"
}

task updateGHPages (dependsOn: 'copyReports') {                    
    group = "Reporting"
    description  'Copies reports to the gh-pages branch in preparation for a future push to GitHub'
    doLast {
        def pagesDir = "$buildDir/gh-pages"
        def grgit = git.open {
            dir = pagesDir + "/.git"
        }
        grgit.add (update: false, patterns: ['reports/'])
        grgit.add (update: true, patterns: ['reports/'])
        grgit.commit {
            message = "Updating web pages"
        }
        grgit.push {}
    }
}
